// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockSystem.Infra.Data.Context;

namespace StockSystem.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContextAPI))]
    partial class ApplicationDbContextAPIModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("StockSystem.Domain.Entities.DescriptionRawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("descriptionrawmaterial");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.Establishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("IdUser")
                        .HasColumnName("iduser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("establishment");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.HistoryRawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateDay")
                        .HasColumnName("dateday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateValidity")
                        .HasColumnName("datevalidity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdRawMaterial")
                        .HasColumnName("idrawmaterial")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("unitprice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdRawMaterial")
                        .IsUnique();

                    b.ToTable("historyrawmaterial");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("IdDescriptionRawMaterial")
                        .HasColumnName("iddescriptionrawmaterial")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstablishment")
                        .HasColumnName("idestablishment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdDescriptionRawMaterial")
                        .IsUnique();

                    b.HasIndex("IdEstablishment")
                        .IsUnique();

                    b.ToTable("rawmaterial");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.SaleDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("DateDay")
                        .HasColumnName("dateday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdEstablishment")
                        .HasColumnName("idestablishment")
                        .HasColumnType("integer");

                    b.Property<decimal>("ResultDay")
                        .HasColumnName("resultday")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment")
                        .IsUnique();

                    b.ToTable("saleday");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.StatisticsDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("DateDay")
                        .HasColumnName("dateday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GrowthRate")
                        .HasColumnName("growthrate")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstablishment")
                        .HasColumnName("idestablishment")
                        .HasColumnType("integer");

                    b.Property<decimal>("RawMaterialExpenditure")
                        .HasColumnName("rawmaterialexpenditure")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment")
                        .IsUnique();

                    b.ToTable("statisticsday");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.StatisticsRawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("DateDay")
                        .HasColumnName("dateday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EstimatedStockDateEmpty")
                        .HasColumnName("estimatedstockdateempty")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdRawMaterial")
                        .HasColumnName("idrawmaterial")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdRawMaterial")
                        .IsUnique();

                    b.ToTable("statisticsrawmaterial");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.ValidationTestDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("DateDay")
                        .HasColumnName("dateday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GrowthRate")
                        .HasColumnName("growthrate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHoliday")
                        .HasColumnName("isholiday")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("validationtestday");
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.Establishment", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.User", "User")
                        .WithOne("Establishment")
                        .HasForeignKey("StockSystem.Domain.Entities.Establishment", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.HistoryRawMaterial", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.RawMaterial", "RawMaterial")
                        .WithOne("HistoryRawMaterial")
                        .HasForeignKey("StockSystem.Domain.Entities.HistoryRawMaterial", "IdRawMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.RawMaterial", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.DescriptionRawMaterial", "DescriptionRawMaterial")
                        .WithOne("RawMaterial")
                        .HasForeignKey("StockSystem.Domain.Entities.RawMaterial", "IdDescriptionRawMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockSystem.Domain.Entities.Establishment", "Establishment")
                        .WithOne("RawMaterial")
                        .HasForeignKey("StockSystem.Domain.Entities.RawMaterial", "IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.SaleDay", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.Establishment", "Establishment")
                        .WithOne("SaleDay")
                        .HasForeignKey("StockSystem.Domain.Entities.SaleDay", "IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.StatisticsDay", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.Establishment", "Establishment")
                        .WithOne("StatisticsDay")
                        .HasForeignKey("StockSystem.Domain.Entities.StatisticsDay", "IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockSystem.Domain.Entities.StatisticsRawMaterial", b =>
                {
                    b.HasOne("StockSystem.Domain.Entities.RawMaterial", "RawMaterial")
                        .WithOne("StatisticsRawMaterial")
                        .HasForeignKey("StockSystem.Domain.Entities.StatisticsRawMaterial", "IdRawMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
